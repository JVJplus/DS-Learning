#include<bits/stdc++.h>
using namespace std;

class Pair;

class Node
{
public:
	int data;
	Node *next;

	Node(int data)
	{
		this->data=data;
		next=NULL;
	}

	static void print(Node *head)
	{
		if(!head)
		{
			cout<<endl;
			return;
		}
		cout<<head->data<<" ";
		print(head->next);
	}

	static Node* takeInput(Node *head)
	{
		int n=0;
		cin>>n;
		Node *tail=NULL;
		while(n!=-1)
		{
			Node *t=new Node(n);
			if(!head)
			{
				head=t;
				tail=t;
			}
			else
			{
				tail->next=t;
				tail=t;
			}

			cin>>n;
		}
		return head;
	}

	static int getLength(Node *& head)
	{
		if(!head)
		{
			return 0;
		}
		return 1+getLength(head->next);
	}

	static Node* deleteNode(Node *head,int position)
	{
		int length=getLength(head);
		if(position>=length)
			return head;

		if(position==0)
		{
			Node* toBeDeleted=head;
			head=head->next;
			delete toBeDeleted;
			return head;
		}

		int count=0;
		Node* tHead=head;
		while(count<position-1)
		{
			tHead=tHead->next;
			count++;
		}

		Node* toBeDeleted=tHead->next;
		tHead->next=tHead->next->next;
		delete toBeDeleted;

		return head;
	}

	static Node* insertRecursively(Node* head,int position,int value)
	{
    if(!head) //NULL
    	return head;

    if(position==0)
    {
    	Node* newNode=new Node(value);
    	newNode->next=head;
    	return newNode;
    }
    if(position==1)
    {
    	Node* newNode=new Node(value);
    	newNode->next=head->next;
    	head->next=newNode;
    	return head;
    }

    Node*  nextHead=insertRecursively(head->next,position-1,value);
    head->next=nextHead;
    return head;
}



static Node* append_last_N_to_First(Node* head,int n)
{
	Node *fast=head,*slow=head;

	while(n--)
		fast=fast->next;

	while(fast->next!=NULL)
	{
		slow=slow->next;
		fast=fast->next;
	}
	fast->next=head;
	head=slow->next;
	slow->next=NULL;
	return head;
}


static Node* removeSilimar(Node* head)
{
	Node *fast=head,*slow=head;  
	while(fast)  
	{
		int current=fast->data;
		while(fast&&fast->data==current)
		{
			fast=fast->next;
		}
		slow->next=fast;
		slow=fast;
	}
	return head;
}

static void printInReverseOrder(Node* head)
{
	if(!head)
		return;
	printInReverseOrder(head->next);
	cout<<head->data<<" ";
}

static Node* reverse(Node* head)
{
	Node *next,*prev=NULL,*current=head;
	while(current)
	{
		next=current->next;
		current->next=prev;
		prev=current;
		current=next;
	}
	return prev;
}

static bool isPalindrome(Node* head)
{
	Node *fast=head,*slow=head;
	while(fast&&fast->next)
	{
		slow=slow->next;
		fast=fast->next->next;
	}	

	Node* part2=slow,*part1=head;

	Node::print(part1);
	Node::print(part2);

	part2=reverse(part2);
	Node::print(part2);

	while(part2)
	{
		if(part1->data!=part2->data)
			return false;
		part1=part1->next;
		part2=part2->next;
	}
	return true;
}

static Node* midpoint_floor(Node *head)
{
	if(!head)
		return head;
	Node *fast=head, *slow=head->next;
	while(fast&&fast->next)
	{
		slow=slow->next;
		fast=fast->next->next;
	}

	return slow;
}

static Node* mergeTwoSorted(Node* A,Node* B)
{
	if(!A)
		return B;
	if(!B)
		return A;

	Node *FT,*TL;//front, tail
	if(A->data <= B->data)
	{
		FT=A;
		TL=A;
		A=A->next;
	}
	else
	{
		FT=B;
		TL=B;
		B=B->next;
	}

	while(A && B)
	{
		if(A->data <= B->data)
		{
			TL->next=A;
			TL=A;
			A=A->next;
		}
		else
		{
			TL->next=B;
			TL=B;
			B=B->next;
		}
	}

	if(A)
		TL->next=A;
	if(B)
		TL->next=B;

	return FT;
}

static Node* midpoint(Node *head)
{
	if(head==NULL)//||head->next==NULL||head->next->next==NULL)
		return head;

	Node *slow=head,*fast=head->next;
	while(fast && fast->next)
	{
		fast=fast->next->next;
		slow=slow->next;
	}
	return slow;
}

static Node* mergeSort(Node* head)
{
	if(!head->next)
		return head;

	// cout<<getLength(head)<<" : ";print(head);

	Node* mid=midpoint(head);
	Node* next=mid->next;
	mid->next=NULL;

	Node *a=mergeSort(head);
	Node *b=mergeSort(next);
	Node *c=mergeTwoSorted(a,b);
	return c;
}

static Node* reverse_rec(Node *head)
{
	if(head->next==NULL||head==NULL)
		return head;
	Node *returned=reverse_rec(head->next);
	head->next->next=head;
	head->next=NULL;
	return returned;
}


static int indexOfNRecursive(Node *head, int n) {
	if(head==NULL)
		return -1;
	if(head->data==n)
		return 0;
	int returned=indexOfNRecursive(head->next,n);
	if(returned==-1)
		return -1;
	else
		return 1+returned;  	
}

static Node* create_sequence(Node *head)
{
	Node *oddHead,*oddTail,*evenHead,*evenTail;
	oddTail=oddHead=evenHead=evenTail=NULL;

	while(head)
	{
		if(head->data%2)
		{
			if(oddHead==NULL)
			{
				oddHead=head;
				oddTail=head;
			}
			else
			{
				oddTail->next=head;
				oddTail=head;
			}
		}
		else
		{
			if(evenHead==NULL)
			{
				evenHead=head;
				evenTail=head;
			}
			else
			{
				evenTail->next=head;
				evenTail=head;
			}
		}
		head=head->next;
	}
	// oddTail->next=NULL;
	if(evenTail!=NULL)
		evenTail->next=NULL;
	if(oddTail==NULL)
		return evenHead;
	if(evenTail==NULL)
		return oddHead;

	oddTail->next=evenHead;
	return oddHead;
}

static Node* skipMdeleteN(Node  *head, int M, int N) 
{
	Node *seq=NULL,*seqHead=seq;
	while(head)
	{
		int c=0;
		while(head&&c<M)
		{
			if(seq==NULL)
			{
				seq=head;
				seqHead=seq;
			}
			else
			{
				seq->next=head;
				seq=seq->next;
			}
			head=head->next;
			c++;
		}
		c=0;
		while(head&&c<N)
		{
			head=head->next;
			c++;
		}
	}
	seq->next=NULL;

	return seqHead;
}

static Node* kReverseFailed(Node *head,int K) //REDO IT
{
	Node *tHead=head,*first,*prev,*firstOfPrev=head,*curr,*next;
	while(tHead)
	{
		prev=tHead;
		first=tHead;
		for(int i=1;i<K&&tHead;i++)
			tHead=tHead->next;
		if(prev==head)
			head=tHead;
		firstOfPrev->next=tHead;

		curr=prev;
		cout<<curr->data<<endl;

		while(curr&&curr!=tHead->next)
		{
			next=curr->next;
			curr->next=prev;
			prev=curr;
			curr=next;
		}
		if(tHead)
			tHead=tHead->next;
		firstOfPrev=first;
	}
	return head;
}


class Pair
{
public:
	Node *head;
	Node *tail;
};



static Pair* reverse_ReturnPair(Node *head)
{
	Pair *toReturn=new Pair();
	toReturn->tail=head;
	Node *next,*prev=NULL,*current=head;
	while(current)
	{
		next=current->next;
		current->next=prev;
		prev=current;
		current=next;
	}
	toReturn->head=prev;
	return toReturn;
}


static Node* kReverse(Node *head,int K)
{
	if(!head)
		return head;

	Node *tail=head;
	for(int i=1;i<K&&tail;i++)
		tail=tail->next;

	Node* nextHead;
	if(tail==NULL)
		nextHead=NULL;
	else
	{
		nextHead=tail->next;
		tail->next=NULL;
	}
	Pair *reversed=reverse_ReturnPair(head);
	Node *returned=kReverse(nextHead,K);

	reversed->tail->next=returned;
	return reversed->head;
}

#define node Node
static node* swap_nodes2(node *head,int i,int j)
{
	node *temp = head, *prev = NULL;
	node *node1 = NULL, *node2 = NULL, *node1_prev = NULL, *node2_prev = NULL;
	int pos = 0;
	while(temp != NULL) {
		if(pos == i) {
			node1_prev = prev;
			node1 = temp;
		}
		else if(pos == j) {
			node2_prev = prev;
			node2 = temp;
		}
		prev = temp;
		temp = temp -> next;
		pos++;
	}

	if(node1_prev != NULL) {
		node1_prev -> next = node2;
	}
	else {
		head = node2;
	}

	if(node2_prev != NULL) {
		node2_prev -> next = node1;
	}
	else {
		head = node1;
	}

	node *temp1 = node2 -> next;
	node2 -> next = node1 -> next;
	node1 -> next = temp1;

	return head;
}


static int valueAt(Node* head,int position)
{
	int count=0;
	while(count<position&&head)
	{
		count++;
		head=head->next;
	}
	return head->data;
}

static Node* bubbleSort(Node *head)
{
	int length=getLength(head);
	for(int i=0;i<length;i++)
	{
		Node* temp=head;
		for(int j=0;j<length-1-i;j++)
		{
			print(head);
			if(temp->data > temp->next->data)
			{
				head=swap_nodes2(head,j,j+1);
			}
			temp=temp->next;
		}
	}
	return head;
}


};

int main() 
{
	std::ios_base::sync_with_stdio(false);
#ifndef ONLINE_JUDGE
    // for getting input from input.txt
	freopen("input.txt", "r", stdin);
    // for writing output to output.txt
	freopen("output.txt", "w", stdout);
#endif
///////////////////////////////////////////////////////////////////////////////
	Node *head1=NULL,*head2=NULL;
	head1=Node::takeInput(head1);
	
	head1=Node::bubbleSort(head1);
	Node::print(head1);
}
