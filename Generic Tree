#include<bits/stdc++.h>
using namespace std;

template <typename T>
class TreeNode
{
public:
	T data;
	vector<TreeNode*> children;

	TreeNode()
	{

	}

	TreeNode(T data)
	{
		this->data=data;
	}

	~TreeNode()
	{
		for(int i=0;i<children.size();i++)
			delete children[i];
	}
};

template<typename T>
TreeNode<T>* takeInputDepthWise(TreeNode<T> *root)
{
	T rootData;
	cin>>rootData;
	root->data=rootData;

	int noOfChild;
	cin>>noOfChild;

	for(int i=0;i<noOfChild;i++)
	{
		TreeNode<T>*child=new TreeNode<T>();
		child=takeInputDepthWise(child);
		root->children.push_back(child);
	}
	return root;
}

template <typename T>
void printDepthWise(TreeNode<T> *root)
{
	if(root==NULL)
		return;

	cout<<root->data<<" : ";
	for(int i=0;i<root->children.size();i++)
	{
		cout<<root->children[i]->data<<",";
	}
	cout<<endl;

	for(int i=0;i<root->children.size();i++)
		printDepthWise(root->children[i]);
}

template <typename T>
TreeNode<T>* takeInputLevelWise(TreeNode<T> *root)
{
	TreeNode<T> *child;
	queue<TreeNode<T>*> pendingNodes;

	T data;
	cin>>data;
	root->data=data;
	pendingNodes.push(root);

	while(!pendingNodes.empty())
	{
		TreeNode<T> *front=pendingNodes.front();
		pendingNodes.pop();
		int noOfChild;
		cin>>noOfChild;

		for (int i = 0; i < noOfChild; ++i)
		{
			cin>>data;
			child=new TreeNode<T>(data);
			pendingNodes.push(child);
			front->children.push_back(child);
		}
	}
	return root;
}

template <typename T>
void displayQueue(queue<TreeNode<T>*> root)
{
	while(!root.empty())
	{
		cout<<root.front()->data<<" ";
		root.pop();
	}
	cout<<endl;
}

template <typename T>
void printLevelWise(TreeNode<T> *root)
{
	if(root==NULL)
		return;

	queue<TreeNode<T>*> pendingNodes;
	pendingNodes.push(root);

	int i;
	TreeNode<T> *front;
	while(!pendingNodes.empty())
	{
		front=pendingNodes.front();
		pendingNodes.pop();
		cout<<front->data<<":";
		
		for(i=0;i<front->children.size();i++) 
		{
			cout<<front->children[i]->data;
			pendingNodes.push(front->children[i]);

			if(i<front->children.size()-1)
				cout<<",";
		}
		cout<<endl;	
	}
}


template <typename T>
T sumOfNodes(TreeNode<T>* root) 
{
	if(root==NULL)
		return 0;

	T sum=0;
	for(int i=0;i<root->children.size();i++) 
	{
		sum+=sumOfNodes(root->children[i]);
	}
	return root->data+sum;
}

template <typename T>
TreeNode<T>* maxDataNode(TreeNode<T>* root) 
{
	TreeNode<T>* largest=root;
	TreeNode<T>* partSmaller;
	for (int i = 0; i < root->children.size(); ++i)
	{
		partSmaller=maxDataNode(root->children[i]);
		if(partSmaller->data>largest->data)
			largest=partSmaller; 
	}
	return largest;
}


template<typename T>
int height(TreeNode<T>* root) {
	if(root==NULL)
		return 0;
	int maxV=0;
	for(int i=0;i<root->children.size();i++){
		maxV=max(maxV,height(root->children[i]));
	}
	return 1+maxV;
}

template<typename T>
void printAtLevelK(TreeNode<T> *root,int K) {
	if(root==NULL)
		return;
	if(K==0)
	{
		cout<<root->data<<" ";
	}	
	for (int i = 0; i < root->children.size(); ++i)
	{
		printAtLevelK(root->children[i],K-1);
	}
}

template<typename T>
int numLeafNodes(TreeNode<T>* root) {
	if(root==NULL)
		return 0;
	if(root->children.size()==0)
		return 1;

	int count=0;
	for (int i = 0; i < root->children.size(); ++i)
	{
		count+=numLeafNodes(root->children[i]);
	}
	return count;
}

template<typename T>
void preOrder(TreeNode<T> *root) {
	if(root==NULL)
		return ;

	cout<<root->data<<" ";
	for (int i = 0; i < root->children.size(); ++i)
	{
		preorder(root->children[i]);
	}
}

template<typename T>
void postOrder(TreeNode<T> *root) {
	if(root==NULL)
		return ;

	for (int i = 0; i < root->children.size(); ++i)
	{
		postOrder(root->children[i]);
	}
	cout<<root->data<<" ";
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);    
#ifndef ONLINE_JUDGE
    // for getting input from input.txt
	freopen("input.txt", "r", stdin);
    // for writing output to output.txt
	freopen("output.txt", "w", stdout);
#endif
///////////////////////////////////////////////////////////////////////////////

	TreeNode<int> *root=new TreeNode<int>();	
	root=takeInputLevelWise(root);
	postOrder(root);	
	

	delete root;
}
