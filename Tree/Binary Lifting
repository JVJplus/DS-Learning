/***********************
*   Jay Prakash Mahto  *
*       JVJplus        *
************************/

#include<bits/stdc++.h>
using namespace std;

#define For(i,n) for(int i=0;i<n;i++)
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define ll long long int
#define pii pair<int,int>
#define fi first
#define se second
#define pb push_back
#define vi vector<int> 
#define N 100005
#define MAXLOG 20
#define MOD 1000000007 //check it 
#define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define dbg(...) __dbg(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __dbg(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << std::endl;}
template <typename Arg1, typename... Args>
void __dbg(const char* names, Arg1&& arg1, Args&&... args){const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__dbg(comma+1, args...);}

//make ipow and ms0
//think of segtree / sqrt decom.

int n;
int arr[N];
int height[N];
int parent[N][MAXLOG];

vi adj[N];

void init(){
    For(i,N){
        adj[i].clear();
    }
}

void dfs(int u,int p=-1){
    parent[u][0]=p;
    if(p!=-1)
        height[u]=height[p]+1;
    for(int i=1;i<MAXLOG;i++){
        if(parent[u][i-1]!=-1)
            parent[u][i]=parent[parent[u][i-1]][i-1];
    }

    for(auto i:adj[u])
        if(i!=p)
            dfs(i,u);
}

void pre(){
    int root=1;
    memset(parent,-1,sizeof(parent));
    dfs(root);
}

int LCA(int u,int v){
    if(height[v]<height[u])
        swap(v,u);

    //bring both nodes to same height
    for(int i=MAXLOG-1;i>=0;i--)
        if(parent[v][i]!=-1 && height[parent[v][i]]>=height[u])
            v=parent[v][i];

    //Now height[u]==height[v]
    if(v==u)
        return v;

    //do lifting
    for(int i=MAXLOG-1;i>=0;i--)
        if(parent[u][i]!=parent[v][i])
            u=parent[u][i],v=parent[v][i];

    return parent[v][0];
}

int dist(int u,int v){
    int lca=LCA(u,v);
    return height[u]+height[v]-2*height[lca];
}

int getAncestor(int u,int dist){
    dist=height[u]-dist;

    for(int i=MAXLOG-1;i>=0;i--){
        if(parent[u][i]!=-1 && height[parent[u][i]]>=dist)
            u=parent[u][i];
    }
    return u;
}

void solve(){
    
    cin >> n;
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    pre();

    int q;
    cin >> q;
    while(q--){
        int a,b;
        cin>>a>>b;
        cout << LCA(a,b) << endl;
    }
}

int main(){

        // /*

    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    freopen("debug_log.txt","w",stderr);
    
          // */

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);



    int t; cin>>t; while(t--)
    { 
        solve();   
    }

}
