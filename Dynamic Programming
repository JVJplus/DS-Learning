#include<bits/stdc++.h>
using namespace std;

// Input macros
#define s(n)                        scanf("%d",&n)
#define sc(n)                       scanf("%c",&n)
#define sl(n)                       scanf("%lld",&n)
#define sf(n)                       scanf("%lf",&n)
#define ss(n)                       getline(cin,n); //scanf("%s",n)

#define fi first
#define se second
#define INF 0x3f3f3f3f
#define pb push_back
typedef long long int ll; 
typedef pair<int,int> ii;

#define For(i,b)                  	for(int i=0;i<b;i++)
#define FoR(i,a,b)                  for(int i=a;i>=b;i--)
#define FOR(i,a,b)                  for(int i=a;i<b;i++)
#define foreach(v, c)               for( auto v:c)
//#define foreach(v, c)             for( auto v = (c).begin();  v != (c).end(); ++v)
#define min3(a,b,c) 					min(a,min(b,c))
#define min4(a,b,c,d) 					min(min(a,b),min(c,d))
#define all(a)                      a.begin(), a.end()
#define fill(a,v)                    memset(a, v, sizeof a)

typedef pair<int,int> ii;
typedef vector<int> vi; 
typedef vector<bool> vb;
typedef vector<vi> vvi; 
typedef vector<ii> vp;

#define pq_max priority_queue<int>
#define pq_min priority_queue<int,vector<int>,greater<int>>

#define whileNE(x) while(!x.empty())
#define present(c,x) ((c).find(x) != (c).end()) 
#define mp make_pair
// directions
const int fx[4][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}};
const int fxx[8][2] = {{0,1}, {0,-1}, {1,0}, {-1,0}, {1,1}, {1,-1}, {-1,1}, {-1,-1}};
// Some common useful functions
#define maX                     INF
#define miN                     INT_MIN
#define checkbit(n,b)                ( (n >> b) & 1)
#define INDEX(arr,ind)               (lower_bound(all(arr),ind)-arr.begin())

#define TCase int T; s(T); while(T--) // the same as above
#define REMAX(a,b) (a)=max((a),(b)) // set a to the maximum of a and b
#define REMIN(a,b) (a)=min((a),(b));
#define PI 3.1415926535897932384626
#define MOD 1000000007
#define SIZE(a)      (int)(a.size())
#define LEN(a)       (int)(a.length())

#define print(x) cout<<x;
#define print2(x,y) cout<<x<<" "<<y;
#define println(x) cout<<x<<'\n';
#define printA(arr,length) for(int i=0;i<length;i++) cout<<arr[i]<<" "; println("");
#define printAB(arr,start,length) for(int i=start;i<length;i++) cout<<arr[i]<<" "; println("");

#define debug(x)                cerr << #x << ": " << x << endl;
#define debug2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;


//BF => Brute Force Technique
//DP => Dynamic Programming Bottom Up Approach
//Momo|r|ization => Top Down Approach 

int nthFibo(int n,int *arr){
	if(n<=1){
		arr[n]=n;
		return n;
	}

	if(arr[n-1]==INT_MIN)
		arr[n-1]=nthFibo(n-1,arr);		
	if(arr[n-2]=INT_MIN)
		arr[n-2]=nthFibo(n-2,arr);		

	arr[n]=arr[n-1]+arr[n-2];
	return arr[n];
}

int nthFibo(int n){ //memorization
	int *arr=new int[n+1];
	for (int i = 0; i < n+1; ++i){
		arr[i]=INT_MIN;
	}
	int ans=nthFibo(n,arr);
	delete arr;
	return ans;
}

int nthFiboDP(int n){
	int *arr=new int[n+1];
	arr[0]=0;
	arr[1]=1;
	for (int i = 2; i <=n; ++i){
		arr[i]=arr[i-1]+arr[i-2];
	}
	return arr[n];
}

int nthFiboSlow(int n){ //for comparison with DP
	if(n<=1)
		return n;
	return nthFiboSlow(n-1)+nthFiboSlow(n-2);
}

int countStepsTo1_BF(int n){ //Brute Force
	if(n<=1)
		return 0;
	
	int a,b=INT_MAX,c=INT_MAX;
	a=countStepsTo1_BF(n-1);
	b=n%2==0?countStepsTo1_BF(n/2):b;
	c=n%3==0?countStepsTo1_BF(n/3):c;
	return min(a,min(b,c))+1;
}

int countStepsTo1_DP(int n){
	
	int arr[n+1];
	arr[0]=0;
	arr[1]=0;
	arr[2]=1;
	arr[3]=1;

	for (int i = 4; i <=n; ++i){
		int a=arr[i-1];
		int b=i%2==0?arr[i/2]:INT_MAX;
		int c=i%3==0?arr[i/3]:INT_MAX;
		int MIN=min(a,min(b,c));
		arr[i]=MIN+1;
	}
	return arr[n];
}

int countStepsTo1_Memorization(int n,int *arr){
	if(n<=1){
		arr[n]=0;
		return 0;
	}
	int a=INT_MAX,b=INT_MAX,c=INT_MAX;
	
	if(arr[n-1]!=INT_MIN)
		a=arr[n-1];
	else{
		a=countStepsTo1_Memorization(n-1,arr);
		arr[n-1]=a;
	}

	if(n%2==0){
		if(arr[n/2]!=INT_MIN)
			b=arr[n/2];
		else
		{
			b=countStepsTo1_Memorization(n/2,arr);
			arr[n/2]=b;
		}
	}

	if(n%3==0){
		if(arr[n/3]!=INT_MIN)
			c=arr[n/3];
		else
		{
			c=countStepsTo1_Memorization(n/3,arr);
			arr[n/3]=b;
		}
	}
	return min(a,min(b,c))+1;
}

int countStepsTo1_Memorization(int n){
	string s="";
	int arr[n+1];
	for (int i = 0; i < n+1; ++i){
		arr[i]=INT_MIN;
	}

	return countStepsTo1_Memorization(n,arr);
}

long staircase_BF(int n){
	if(n<0)
		return 0;
	if(n<=1)
		return 1;
	return staircase_BF(n-1)+staircase_BF(n-2)+staircase_BF(n-3);
}

long long int staircase_DP(int n){
	long long int arr[n+1];
	arr[0]=0;
	arr[1]=1;
	arr[2]=2;
	arr[3]=4;
	
	for (int i = 4; i <=n; ++i){
		arr[i]=arr[i-1]+arr[i-2]+arr[i-3];
	}
	return arr[n];	
}


int minCount_Greedy(int n){
	/*
	Given an integer N, find and return the count of minimum numbers,
	 sum of whose squares is equal to N.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} 
and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
Eg: 12=3, 2^2 + 2^2 +2^2
*/
	int sq=sqrt(n);
	int count=0,sum=0;
	while(sum!=n){
		if(sum+(sq*sq)<=n){
			sum+=sq*sq;
			count++;
		}
		else
			sq--;
	}    
	return count;
}


int minCount_BF(int n){
	if(n<=1)
		return n;
	int MIN=INT_MAX;
	for(int i=1;i<=sqrt(n);i++)
		MIN=min(MIN,1+minCount_BF(n-(i*i)));
	return MIN;
}

int minCount_Memoization(int n,int *arr){
	if(n<=1){
		arr[n]=n;
		return n;
	}

	int MIN=INT_MAX;
	for (int i = 1; i <= sqrt(n); ++i){
		if(arr[n-(i*i)]==INT_MAX){
			MIN=min(MIN,minCount_Memoization(n-(i*i),arr));
		}
		else{
			MIN=min(MIN,arr[n-(i*i)]);
		}
	}
	arr[n]=MIN+1;
	return arr[n];
}

int minCount_Memoization(int n){
	int arr[n+1];
	for(int i=0;i<=n;i++)
		arr[i]=INT_MAX;
	
	return minCount_Memoization(n,arr);
}

int minCount_DP(int n){
	if(n<=1){
		return n;
	}

	int arr[n+1];
	arr[0]=0;
	arr[1]=1;

	int MIN;
	for(int i=2;i<=n;i++){
		MIN=INT_MAX;
		for(int j=1;j<=sqrt(i);j++){	
			MIN=min(MIN,arr[i-j*j]);
		}
		arr[i]=1+MIN;
	}
	return arr[n];
}

long long int  balancedBTs_BF(int h){
	// Formula: f(h)= f(h-1)*f(h-1) + f(h-1)*f(h-2) + f(h-2)*f(h-1)
	if(h<=1)
		return 1;
	long long int x=(balancedBTs_BF(h-1))%1000000007;
	long long int y=(balancedBTs_BF(h-2))%1000000007;

	return  (((x*x)%1000000007)+(2*(x*y)))%1000000007;
}

int balancedBTs_DP(int h){
	long long int  arr[h+1];
	arr[0]=arr[1]=1;
	for (int i = 2; i <= h; ++i){
		arr[i]= ((arr[i-1]*arr[i-1])%1000000007+
			(arr[i-1]*arr[i-2])%1000000007+
			(arr[i-2]*arr[i-1])%1000000007)%1000000007;
	}
	return arr[h];
}

bool isValidPath(int x,int y, int m, int n){
	if(x<0||y<0)
		return false;
	if(x>=m || y>=n)
		return false;
	return true;
}

int minCostPath_Memoization(int **arr, int **dp, int m, int n, int x, int y){
	if(x==m-1 && y==n-1){
		dp[x][y]=arr[x][y];
		return arr[x][y];
	}

	int MIN=INT_MAX;

	if(dp[x][y]!=INT_MIN)
		return dp[x][y];

	//can be done without isValidPath() func. by returning INT_MAX in invalid case
	//can check it before putting in the dp.
	
	if(isValidPath(x,y+1,m,n)){//left
		if(dp[x][y+1]==INT_MIN)
			dp[x][y+1]=minCostPath_Memoization(arr,dp,m,n,x,y+1);
		MIN=min(MIN,dp[x][y+1]);
	}

	if(isValidPath(x+1,y+1,m,n)){//diagonal
		if(dp[x+1][y+1]==INT_MIN)
			dp[x+1][y+1]=minCostPath_Memoization(arr,dp,m,n,x+1,y+1);
		MIN=min(MIN,dp[x+1][y+1]);
	}

	if(isValidPath(x+1,y,m,n)){//down
		if(dp[x+1][y]==INT_MIN)
			dp[x+1][y]=minCostPath_Memoization(arr,dp,m,n,x+1,y);
		MIN=min(MIN,dp[x+1][y]);
	}

	dp[x][y]=arr[x][y]+MIN;
	return dp[x][y];
}


int minCostPath_BF(int **arr, int m, int n, int x, int y) {
	if(x>=m || y>=n)	
		return INT_MAX;
	if(x==m-1 && y==n-1){
		return arr[x][y];
	}

	int MIN=INT_MAX;
	MIN=min(MIN,minCostPath_BF(arr,m,n,x,y+1));
	MIN=min(MIN,minCostPath_BF(arr,m,n,x+1,y+1));
	MIN=min(MIN,minCostPath_BF(arr,m,n,x+1,y));
	return arr[x][y]+MIN;
}

int minCostPath_DP(int **arr,int m,int n){
	int dp[m][n];
	dp[m-1][n-1]=arr[m-1][n-1];

	for(int i=m-1;i>=0;i--){
		for(int j=n-1;j>=0;j--){
			if(i==m-1 && j==n-1)
				continue;
			int MIN=INT_MAX;
			if(i<m&&j+1<n)//left
				MIN=min(MIN,dp[i][j+1]);
			if(i+1<m&&j+1<n)//dia
				MIN=min(MIN,dp[i+1][j+1]);
			if(i+1<m&&j<n)//down
				MIN=min(MIN,dp[i+1][j]);
			dp[i][j]=arr[i][j]+MIN;
		}
	}
	return dp[0][0];
}

void minCostPath(){
	int m,n;
	cin>>m>>n;

	//dynamic 2d array allocation
	int **arr=new int*[m];
	int **dp=new int*[m];
	for (int i = 0; i < m; ++i){
		arr[i]=new int[n];
		dp[i]=new int[n];
		for (int j = 0; j < n; ++j){
			cin>>arr[i][j];
			dp[i][j]=INT_MIN;
		}
	}

	cout<<minCostPath_DP(arr,m,n);

	//deallocate
	for (int i = 0; i < m; ++i){
		delete [] arr[i];
		delete [] dp[i];
	}
	delete [] arr;
	delete [] dp;
}

int LCS_BF(string s1, string s2){
	if(s1.empty() || s2.empty())
		return 0;

	if(s1[0]==s2[0]){
		return 1+LCS_BF(s1.substr(1),s2.substr(1));
	}		

	int a=LCS_BF(s1.substr(1),s2);
	int b=LCS_BF(s1,s2.substr(1));
	return max(a,b);
}

int LCS_Memoization(string s1,string s2, int **dp){
	if(s1.empty() || s2.empty())
		return 0;
	
	int length1=s1.length();
	int length2=s2.length();

	//helpful bcz i have to not check for -1 later on		
	if(dp[length1][length2]!=-1)
		return dp[length1][length2];

	if(s1[0]==s2[0]){

		if(dp[length1-1][length2-1] == -1)
			dp[length1-1][length2-1] = LCS_Memoization(s1.substr(1),s2.substr(1),dp);

		dp[length1][length2] = 1 + dp[length1-1][length2-1];
		return dp[length1][length2];
	}

	dp[length1][length2-1] = LCS_Memoization(s1, s2.substr(1) , dp);
	dp[length1-1][length2] = LCS_Memoization(s1.substr(1), s2, dp);

	return max( dp[length1][length2-1], dp[length1-1][length2] );
}

int LCS_DP(string s1, string s2){

	int length1=s1.length(),length2=s2.length();
	int dp[s1.length()+1][s2.length()+1];
	For(i,s1.length()+1){
		For(j,s2.length()+1){
			if(i==0 || j==0){
				dp[i][j]=0;
				continue;
			}

			if(s1[i-1]==s2[j-1])
				dp[i][j]=1+dp[i-1][j-1];
			else
				dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}

	//print
	string ans="";
	int x=length1,y=length2;
	while(x>0 && y>0){
		if(s1[x-1] == s2[y-1]){
			ans=s1[x-1]+ans;
			x--;
			y--;
		}
		else if(dp[x-1][y] > dp[x][y-1])
			x--;
		else
			y--;
	}
	cout<<ans<<endl;

	//matrix
	/*for (int i = 0; i < 1+length1; ++i){
		for (int j = 0; j < 1+length2; ++j){
			cout<<dp[i][j]<<" ";
		}
		cout<<endl;
	}
	*/

	return dp[length1][length2];
}

int lcsubstring(string s1,string s2){
	// cout<<" : "<<s1<<" "<<s2<<endl;
	int length1=s1.length(),length2=s2.length();
	int dp[s1.length()+1][s2.length()+1];
	int Max=0;
	For(i,s1.length()+1){
		For(j,s2.length()+1){
			if(i==0 || j==0){
				dp[i][j]=0;
				continue;
			}

			if(s1[i-1]==s2[j-1])
				dp[i][j]=1+dp[i-1][j-1],max(Max,dp[i][j]);
			else
				dp[i][j]=0;
		}
	}

	return Max;
}


int editDistance_BF(string s1, string s2){
	if(s1.empty())
		return s2.length();
	if(s2.empty())
		return  s1.length();

	if(s1[0]==s2[0])
		return editDistance_BF(s1.substr(1), s2.substr(1));

	int a=editDistance_BF(s1.substr(1), s2); //
	int b=editDistance_BF(s1, s2.substr(1)); //
	int c=editDistance_BF(s1.substr(1), s2.substr(1)); //
	return 1+min(a, min(b,c));
}

int editDistance_Memoization(string s1, string s2, int **dp){
	int m=s1.length(), n=s2.length();
	if(min(m,n)==0)
		return max(m,n);

	if(dp[m][n] != -1)
		return dp[m][n];

	if(s1[0]==s2[0]){
		dp[m-1][n-1]=editDistance_Memoization(s1.substr(1), s2.substr(1), dp);
		dp[m][n] = 0 + dp[m-1][n-1];
		return dp[m][n];
	}

	//no need to check for -1 bcz already this case is handled by !=-1 above
	dp[m][n-1]=editDistance_Memoization(s1, s2.substr(1), dp);
	dp[m-1][n]=editDistance_Memoization(s1.substr(1), s2, dp);
	dp[m-1][n-1]=editDistance_Memoization(s1.substr(1), s2.substr(1), dp);


	dp[m][n] = 1 + min( dp[m][n-1] ,min( dp[m-1][n] , dp[m-1][n-1] ));
	return dp[m][n];
}

int editDistance_DP(string s1, string s2){
	int m=s1.length(), n=s2.length();

	int dp[m+1][n+1];

	for(int i=0; i<=m; i++){
		for(int j=0; j<=n; j++){			
			if(i==0 || j==0){//tricky
				dp[i][j]=max(i,j);
				continue;
			}

			if(s1[m-i] == s2[n-j]){
				dp[i][j] = dp[i-1][j-1];
			}
			else{
				dp[i][j] = 1 + min(dp[i-1][j] , min(dp[i][j-1], dp[i-1][j-1]));
			}
		}
	}
	return dp[m][n];
}

int knapsack_BF(int* weights, int* values, int n, int maxWeight){
	if (n == 0 || maxWeight == 0) {
		return 0;
	}

	if (weights[n-1] > maxWeight) {
		return knapsack(weights, values, n-1, maxWeight);
	}
	else {
		int ans=max(values[n-1] + knapsack(weights, values, n-1, maxWeight-weights[n-1]),
			knapsack(weights, values, n-1, maxWeight));
		return ans;
	}
}

int knapsack_Memoization(int* weights, int* values, int n, int maxWeight){
	if (n == 0 || maxWeight == 0) {
		return 0;
	}

	if(dp[n][maxWeight]!=-1)
		return dp[n][maxWeight];

	if (weights[n-1] > maxWeight) {
		dp[n-1][maxWeight]=knapsack(weights, values, n-1, maxWeight);
		return dp[n-1][maxWeight];
	}
	else {
		int ans=max(values[n-1] + knapsack(weights, values, n-1, maxWeight-weights[n-1]),
			knapsack(weights, values, n-1, maxWeight));
		dp[n][maxWeight]=ans;
		return ans;
	}
}

int knapsack_DP(int *values,int *weights,int N,int maxW){
	int dp[N+1][maxW+1];
	for(int i = 0; i < N+1; i++){
		for(int j = 0; j < maxW+1; j++){			
			if(i==0 || j==0)
				dp[i][j]=0;
			else if(j < weights[i-1])
				dp[i][j]=dp[i-1][j];
			else
				dp[i][j]=max(values[i-1]+dp[i-1][j-weights[i-1]] ,dp[i-1][j]);	
		}		
	}
/*
	for(int i = 0; i < N+1; i++){
		for(int j = 0; j < maxW+1; j++){			
			cout<<left<<setw(3)<<dp[i][j]<<" ";
		}
		cout<<endl;
	}*/
	

	return dp[N][maxW];
}

int getMaxMoney_BF(int arr[], int n){
	if(n<=0)	
		return 0;
	int a=arr[n-1]+getMaxMoney_BF(arr, n-2);
	int b=getMaxMoney_BF(arr, n-1);
	return max(a,b);
}

int getMaxMoney_Memoization(int arr[], int N, int *dp){
	if(N <= 0)
		return 0;

	if(dp[N] != -1)
		return dp[N];

	int a=getMaxMoney_Memoization(arr, N-1, dp);
	dp[N-1]=a;
	int b=getMaxMoney_Memoization(arr, N-2, dp);
	dp[N-2]=b;

	dp[N] = max( arr[N-1]+b, a);

	return dp[N];
}

int getMaxMoney_DP(int *arr, int N){
	if(N==0)
		return 0;
	if(N==1)
		return arr[0];
	
	int prevPrev,prev;
	prevPrev=arr[0];
	prev=max(arr[0],arr[1]);
	int answer=prev;

	for (int i = 2; i < N; ++i){
		answer=max(arr[i]+prevPrev , prev);
		prevPrev=prev;
		prev=answer;
	}
	return answer;
}

int LIS_DP(int *arr, int N) {
	int LISEndingHere[N];
	int ans=0;

	for(int i = 0; i < N; i++){
		int maxCount=0;
		for(int j = i-1; j >= 0; j--){			
			if(arr[j] < arr[i])
				maxCount = max(maxCount,LISEndingHere[j]);
		}
		LISEndingHere[i] = maxCount + 1;
		ans=max(ans,LISEndingHere[i]);
	}

	return ans;
}

void displayLIS(int *arr,int *dp,int index,int MAX,int value,vi &v){
	if(index<0)
		return;
	if(MAX==1 && dp[index]==1 && arr[index]<value){
		v.pb(arr[index]);
		FoR(i,v.size()-1,0)
		cout<<v[i]<<" ";
		cout<<endl;
		v.pop_back();
		return;
	}

	if(dp[index]==MAX && arr[index]<value){
		v.pb(arr[index]);
		displayLIS(arr,dp,index-1,MAX-1,arr[index],v);
		v.pop_back();
	}

	displayLIS(arr,dp,index-1,MAX,value,v);
}

int lis(int arr[], int n) {
	int dp[n];
	int MAX=miN;
	For(i,n){

		int prevValue=miN;
		int j=i-1;
		while(j>=0){
			if(arr[j]<arr[i])
				REMAX(prevValue,dp[j]);
			j--;
		}
		if(prevValue==miN)
			prevValue=0;
		dp[i]=1+prevValue;
		REMAX(MAX,dp[i]);
	}

	vi v;
	displayLIS(arr,dp,n-1,MAX,maX,v);
	return MAX;
}


	/*
	Given two integers a and b. You need to find and return the 
	count of possible ways in which we can represent the number a as the 
	sum of unique integers raise to the power b.
	For eg. if a = 10 and b = 2, only way to represent 10 as -
	10 = 1^2 + 3^2 
	Hence, answer is 1.
	100, 2 => 3
	*/

int all_ways(int sum, int power){
	//TODO again
}


int coinChange(int *arr, int n, int value){
	if(value==0){
		return 1;
	}

	if(n<=0 || value<0)
		return 0;

	return coinChange(arr+1 , n-1, value) + coinChange(arr, n, value-arr[0]);
}

int coinChange_Memoization(int *arr, int n, int value, unordered_map< string ,int> &lookup){
	if(value==0)
		return 1;

	if(n<=0 || value<0)
		return 0;

	string toFind=to_string(n)+"|"+to_string(value);
	if(lookup.find(toFind)==lookup.end()){
		int include=coinChange_Memoization(arr, n, value-arr[0], lookup );
		int exclude=coinChange_Memoization(arr+1, n-1, value, lookup );

		lookup[toFind] = include + exclude;
	}
	return lookup[toFind];
}

int coinChange_Memoization(int *arr, int n, int value){
	unordered_map< string, int> lookup;
	return coinChange_Memoization(arr,n,value,lookup);
}

int coinChange_DP(int *arr, int n, int value){
	int dp[value+1][n];
	for (int i = 0; i < n; ++i){
		dp[0][i]=1;
	}

	for(int i = 1; i <= value; i++){
		for(int j = 0; j < n; j++){			
			int count1=0,count2=0;

			if(j-1 >=0 )
				count1=dp[i][j-1];

			if(i-arr[j]>=0)
				count2=dp[i-arr[j]][j];

			dp[i][j]=count1+count2;	
		}
	}

	return dp[value][n-1];
}

int mcm_BF_helper(int *arr, int start, int end){
	if(start==end)
		return 0;

	int MIN=INT_MAX,temp;
	for(int i=start; i<end;i++)
	{	
		temp=mcm_BF_helper(arr, start, i) +
		mcm_BF_helper(arr, i+1, end) +
		arr[start-1]*arr[i]*arr[end];
		MIN=min(MIN,temp);
	}
	return MIN;
}

int mcm_BF(int *arr, int n){
	return mcm_BF_helper(arr,1,n-1);
}

int mcm_memoization_helper(int *arr, int start, int end, int **dp){
	if(start==end){
		dp[start][end]=0;
		return 0;
	}

	if(dp[start][end]!=-1)
		return dp[start][end];

	int MIN=INT_MAX,temp;
	for(int i=start; i<end; i++){
		temp=mcm_memoization_helper(arr,start,i,dp) +
		mcm_memoization_helper(arr,i+1,end,dp) +
		arr[start-1]*arr[i]*arr[end];
		MIN=min(MIN,temp);
	}		
	dp[start][end]=MIN;
	return dp[start][end];
}

int mcm_memoization(int *arr, int n){
	int **dp=new int*[n];
	for(int i = 0; i < n; i++){
		dp[i]=new int[n];
		for(int j = 0; j < n; j++){			
			dp[i][j]=-1;
		}
	}
	
	mcm_memoization_helper(arr, 1, n-1, dp);
/*	
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){			
			cout<<dp[i][j]<<"\t";
		}
		cout<<endl;
	}	
*/	
	return dp[1][n-1];
}

int mcm_DP(int *arr, int n){
	int dp[n][n];
	//[i,j] represents from matrix i to j minimum brackets required

	//diagonal ie base is 0 when matrix is only 1 
	for(int i=0;i<n;i++)
		dp[i][i]=0; //L = 1  is already done here

	
	int temp;
	for(int x,y,i=2;i<n;i++){
		for(int j=1;j<n-i+1;j++){
			x=j;
			y=x+i-1;
			dp[x][y]=INT_MAX;

			for(int k=x;k<y;k++){
				temp = dp[x][k] + dp[k+1][y] + 
				arr[x-1]*arr[k]*arr[y];
				dp[x][y] = min(dp[x][y],temp);
			}
		}
	}
/*
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){			
			cout<<dp[i][j]<<"\t";
		}
		cout<<endl;
	}
	*/

	return dp[1][n-1];
}


int findMaxSquareWithAllZeros(int** arr, int row, int col){
	int dp[row][col];
	for(int i = 0; i < row; i++){
		for(int j = 0; j < col; j++){	
			dp[i][j]= i==0|| j==0 ? 0 : 1 + min(dp[i-1][j-1], dp[i][j-1]);
			MAX=max(dp[i][j],MAX);		
		}
	}
	return MAX;	
}

string coinTower(int n, int k, int l)
{
	int a[n+1]={0};
	a[0]=0;
	a[1]=1;

	for(int i=2;i<=n;i++)
	{
		if(!a[i-1])
			a[i]=1;
		if(i-k>=0&&!a[i-k])
			a[i]=1;
		if(i-l>=0&&!a[i-l])
			a[i]=1;
	}

	if(!a[n])
		return "Whis";
	else
		return "Beerus";
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);    
#ifndef ONLINE_JUDGE
    // for getting input from input.txt
	freopen("input.txt", "r", stdin);
    // for writing output to output.txt
	freopen("output.txt", "w", stdout);
#endif
///////////////////////////////////////////////////////////////////////////////

	
	

}
