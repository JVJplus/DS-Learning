//Adjencency List
#include<bits/stdc++.h>
using namespace std;
#define INF 0x3f3f3f3f
typedef pair<int,int> ii;
vector<vector<ii>> graph;

void prims(){
	int V=graph.size();
	priority_queue< ii,vector<ii>, greater<ii> >pq;
	vector<int> weight(V,INF);
	vector<bool> visited(V,false);
	pq.push({0,1});

	while(!pq.empty()){
		int minWeight=pq.top().first;
		int minVertex=pq.top().second;
		pq.pop();
		visited[minVertex]=1;

		for(int i=0;i<graph[minVertex].size();i++){
			int cVertex=graph[minVertex][i].first;
			int cWeight=weight[cVertex];

			if(visited[cVertex])
				continue;

			int pathWeight=graph[minVertex][i].second;
			if(pathWeight < cWeight)
				weight[cVertex]=pathWeight, pq.push({pathWeight,cVertex});
		}
	}
	
	int s=0;
	for (int i = 2; i < V ; ++i){
		s+=weight[i];
	}
	cout<<s;
}

int main()
{
	int V,E;
	cin>>V>>E;
	graph.resize(V+1);

	for (int i = 0; i < E; ++i){
		int u,v,w;
		cin>>u>>v>>w;
		graph[u].push_back({v,w});
		graph[v].push_back({u,w});
	}
	prims();
}
