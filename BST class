/*
Sample:
Input:
1 20 1 40 1 10 1 30 1 70 1 15 1 65 1 35 1 25 3 40 2 40 3 40 3 65 -1

Output:
true
false
true
20:L:10,R:65
10:R:15
15:
65:L:30,R:70
30:L:25,R:35
25:
35:
70:
*/

#include<bits/stdc++.h>
using namespace std;

template <typename T>
class BinaryTreeNode {
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

class BST {
    BinaryTreeNode<int>* root;
    
    BinaryTreeNode<int>* insert(BinaryTreeNode<int>* root,int data)
    {
        if(!root)
        {
            BinaryTreeNode<int> *node=new BinaryTreeNode<int>(data);
            return node;
        }   

        if (data<root->data)
        {
            root->left=insert(root->left,data);    
        }
        else
        {
            root->right=insert(root->right,data);
        }
        return root; 
    }

    bool hasData(BinaryTreeNode<int>*root,int data)
    {
        if(!root)
            return false;
        if(root->data==data)
            return true; 

        return hasData(root->left,data)||hasData(root->right,data);
    }

    void printTree(BinaryTreeNode<int>* root)
    {
        if(!root)
            return;

        cout<<root->data<<":";
        if(root->left)
        {
            cout<<"L:"<<root->left->data;
        }
        
        if(root->left)//and root->right
            cout<<",";
        
        if(root->right)
            cout<<"R:"<<root->right->data;
        cout<<endl;

        printTree(root->left);
        printTree(root->right);
    }


    BinaryTreeNode<int>* deleteData(BinaryTreeNode<int> *root,int data)
    {
        if(!root)
        {
            return NULL;
        }

        if(root->data==data)
        {
            if(!root->left)
            {
                BinaryTreeNode<int>* temp=root->right;
                root->right=NULL;
                delete root;
                return temp;
            }
            if(!root->right){
                BinaryTreeNode<int>* temp=root->left;
                root->left=NULL;
                delete root;
                return temp;
            }

            BinaryTreeNode<int>*  minNode=root->right;
            while(minNode->left)
                minNode=minNode->left;

            int minValue=minNode->data;
            root->data=minValue;
            root->right=deleteData(root->right,minValue);
            return root;
        }

        if(data<root->data)
            root->left=deleteData(root->left,data);
        else
            root->right=deleteData(root->right,data);

        return root;
    }

public:

    BST()
    {
        root=NULL;
    }

    ~BST()
    {
        delete root;
    }

    void insert(int data)
    {
        root=insert(root,data);
    }

    void printTree()
    {
        printTree(root);
    }

    bool hasData(int data)
    {
        return hasData(root,data);
    }

    void deleteData(int data)
    {
        root=deleteData(root,data);
    }
};



int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);    
#ifndef ONLINE_JUDGE
    // for getting input from input.txt
    freopen("input.txt", "r", stdin);
    // for writing output to output.txt
    freopen("output.txt", "w", stdout);
#endif
///////////////////////////////////////////////////////////////////////////////

    
    BST *tree = new BST();
    int choice, input;
    while(true){
        cin>>choice;
        switch(choice){
            case 1:
            cin >> input;
            tree->insert(input);
            break;
            case 2:
            cin >> input;
            tree->deleteData(input);
            break;
            case 3:
            cin >> input;
            if(tree->hasData(input)) {
                cout << "true" << endl;
            }
            else {
                cout << "false" << endl;
            }
            break;
            default:
            tree->printTree();
            delete tree;
            return 0;
            break;
        }
    }
    
}

