//https://www.hackerearth.com/practice/data-structures/advanced-data-structures/fenwick-binary-indexed-trees/practice-problems/algorithm/help-ashu-1/
//TLE Solution

#include<bits/stdc++.h>
using namespace std;

#define For(i,n) for(int i=0;i<n;i++)
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define MS0(arr) memset(arr,0,sizeof(arr));
#define MS1(arr) memset(arr,-1,sizeof(arr));
#define fi first
#define se second
#define pb push_back
#define pii pair<int,int>
#define ll long long
#define inf 0x3f3f3f3f
#define MOD 1e9+7
#define REMAX(a,b) a=max(a,b)
#define REMIN(a,b) a=min(a,b)
#define INF 1e18+4
#define dbg(a) cerr<<#a<<" "<<a<<endl;
#define dbg2(a,b) cerr<<#a<<" "<<a<<" | "<<#b<<" "<< b<<endl;
#define dbg3(a,b,c) cerr<<#a<<" "<<a<<" | "<<#b<<" "<< b<<" | "<<#c<<" "<<c<<endl;

#define N 100005
#define SQRT 100005
ll n,a,b,c,x,y,z;
ll arr[N];
ll block[SQRT]; //contains count of even nos in block

void update(int idx,int val){
	int b_no=idx/SQRT;
	int prev=arr[idx];
	arr[idx]=val;
	if(prev%2==0){
		if(val%2==1)
			block[b_no]--;
	}else{
		if(val%2==0)
			block[b_no]++;
	}
}

int query(int l,int r){
	if(l>r) return 0;

	dbg2(l,r);
	int ans=0;
	//1st block arr
	while(l==0||l%SQRT!=0&&l<=r){
		if(arr[l]%2==0)ans++;
		l++;
	}

	//mid blocks
	while(l<=r){
		ans+=block[l/SQRT];
		l+=SQRT;
	}

	//last block arr
	while(l<=r){
		if(arr[l]%2==0)ans++;
		l++;
	}
	dbg3(l,r,ans);
	return ans;
}

void solve(int tCaseNo){

	//sqrt Decomposition
	cin>>n;
	For(i,n)cin>>arr[i];
	int q;cin>>q;
	while(q--){
		cin>>a>>b>>c;
		if(a==0){
			b--;
			update(b,c);
		}
		if(a==1){
			b--,c--;
			cout<<query(b,c)<<endl;
		}
		if(a==2){
			b--,c--;
			int n=c-b+1;
			cerr<<":"<<n<< " "<<query(b,c)<<endl;
			cout<<n-query(b,c)<<endl;
		}
	}
}

int main(){

    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    freopen("debug_log.txt","w",stderr);
    #endif

    //fast_io
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);cout.tie(NULL);

    int testNo=1;
    // int t; cin>>t; while(t--)
    { 
        solve(testNo++);   
    }
}



//Notes:

//make ipow and ms0
//loop names l1,l2 lena
//think of segtree / sqrt decom. /BIT
//2 ptrs, sliding window, Prefix sums
//SPD2 ;P
//Reduce states in dp, like sum se subtract, i^1 ie dp[2][N](memory efficient)
//Binary Search
//DFS number
//topologi.
//LCA
